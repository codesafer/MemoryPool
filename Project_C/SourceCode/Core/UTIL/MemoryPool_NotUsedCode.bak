namespace UTIL{
namespace MEM{


    /*----------------------------------------------------------------
    /-----------------------------------------------------------------
    /   메모리 풀 링커
    /       이 객체의 존재 이유는, 해당되는 메모리풀을 탐색하지 않기 위함
    /       만약 operator new 함수에서 타입을 추론가능 하다면 더 빠른 gFN_Get_MemoryPool를 사용해야 한다
    /-----------------------------------------------------------------
    ----------------------------------------------------------------*/
#pragma region class CMemoryPool_Linker
#pragma warning(push)
#pragma warning(disable: 4324)
    class _DEF_CACHE_ALIGN CMemoryPool_Linker final{
        _DEF_FRIEND_SINGLETON;
        friend class CMemoryPool_Manager;
        template<typename _TagLinkerGroup> friend class CMemoryPoolResource;

        CMemoryPool_Linker()
        {
        }
        ~CMemoryPool_Linker()
        {
        }

    private:
    #pragma region Define TYPE
        struct _DEF_CACHE_ALIGN TLinkPool_Chunk final{
            // 캐시라인 크기 2배의 크기로 생성된다
            // 담을수 있는 링크수:
            //      64BIT   7
            //      32BIT   15
            TLinkPool_Chunk()
                : m_pNext(NULL)
                , m_Create_Next(0)
            {
                ::ZeroMemory(m_UnitSizes, s_cNumPool * sizeof(size_t));
                ::ZeroMemory(m_pPools, s_cNumPool * sizeof(void*));
            }
            ~TLinkPool_Chunk()
            {
                //_SAFE_DELETE_ALIGNED_CACHELINE(m_pNext);
                if(m_pNext)
                    g_pMem->_mFN_Prohibit__LinkPool_Chunk__DELETE(m_pNext);
            }

            TLinkPool_Chunk* GetNext()
            {
                if(m_pNext)
                    return m_pNext;

                if(0 == ::InterlockedExchange(&m_Create_Next, 1))
                {
                    //TLinkPool_Chunk* pNew = NULL;
                    //_SAFE_NEW_ALIGNED_CACHELINE(pNew, TLinkPool_Chunk);
                    TLinkPool_Chunk* pNew = (TLinkPool_Chunk*)g_pMem->_mFN_Prohibit__LinkPool_Chunk__NEW();
                    _AssertReleaseMsg(pNew, "Failed Alloc : TLinkPool_Chunk");
                    m_pNext = pNew;
                }
                else
                {
                    while(!m_pNext){}
                }

                return m_pNext;
            }
            static const size_t s_cThisSize = _DEF_CACHE_SIZE * 2;
            static const size_t s_cNumPool  = (s_cThisSize - sizeof(void*) - sizeof(LONG)) / (sizeof(size_t) + sizeof(void*));
            _MACRO_STATIC_ASSERT(3 < s_cNumPool);

            size_t       m_UnitSizes[s_cNumPool];
            IMemoryPool* m_pPools[s_cNumPool];

            TLinkPool_Chunk*    m_pNext;
            volatile LONG       m_Create_Next;
        };
    #pragma endregion

        _DEF_CACHE_ALIGN TLinkPool_Chunk    m_Link;
        _DEF_CACHE_ALIGN LOCK::CSpinLock    m_Lock;

    private:
        IMemoryPool* mFN_Find_Pool(size_t size)
        {
            if(!size)
                size = 1;

            // 상속 단계가 지나치게 길어지면 이 코드는 수정되어야 한다
            TLinkPool_Chunk* pLink = &m_Link;
            for(;;)
            {
                for(size_t i=0; i<TLinkPool_Chunk::s_cNumPool; i++)
                {
                    if(pLink->m_UnitSizes[i] == size)
                    {
                        return pLink->m_pPools[i];
                    }

                    if(pLink->m_UnitSizes[i] == 0)
                    {
                        if(mFN_Link_MemoryPool(pLink, i, size))
                            return pLink->m_pPools[i];
                    }
                }
                pLink = pLink->GetNext();
            }
        }
        DECLSPEC_NOINLINE BOOL mFN_Link_MemoryPool(TLinkPool_Chunk* pLink, size_t index, size_t size)
        {
            _AssertReleaseMsg(size > 0), "invalid size");

            LOCK::CAutoLock<LOCK::CSpinLock> _autoLock(&m_Lock);
            if(pLink->m_UnitSizes[index] != 0)
            {
                // 다른 스레드가 끼어들어 처리한 경우를 확인
                if(pLink->m_UnitSizes[index] == size)
                    return TRUE;
                else
                    return FALSE;
            }

            // 빈슬롯에 메모리풀 연결
            //      관리하는 크기 한도를 벗어난다면 NULL
            //      이경우 메모리풀 관리자의 BadSize_New 를 사용한다
            pLink->m_pPools[index]    = g_pMem->mFN_Get_MemoryPool(size);
            pLink->m_UnitSizes[index] = size;

            return TRUE;
        }
    };
#pragma warning(pop)
#pragma endregion

}
}